{"version":3,"sources":["assets/errorPoster.jpg","firebase.js","FlickList.js","Form.js","Help.js","QueryList.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","FlickList","props","filmList","filmName","filmId","className","id","src","filmImg","alt","onClick","database","ref","remove","Form","handleFormChange","event","setState","userInput","target","value","waitForOnSubmit","handleFormSubmit","state","handleHeaderActive","onSubmit","this","type","onChange","placeholder","aria-label","Component","Help","handleShowHelp","active","QueryList","waitAddToUserList","addToUserList","attributes","data","added","document","getElementById","innerHTML","Fragment","error","queryList","map","key","poster_path","errorPoster","title","overview","App","axiosCall","userQuery","axios","url","method","responseType","params","api_key","query","include_adult","then","response","results","length","handleChange","userSearchValue","preventDefault","randomChoice","handleAddToUserList","db","duplicateCheck","once","snapshot","forEach","childSnapshot","push","val","includes","alert","handleShowList","handleRandomize","randomFilm","randomNumber","Math","floor","random","headerActive","duplicate","on","dbResponse","filmListFromDb","dataFromDb","wow","film","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.c16d7e83.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/errorPoster.74bddd9e.jpg\";","// firebase.js\nimport firebase from 'firebase/app';\nimport 'firebase/database';\n\nvar firebaseConfig = {\n    apiKey: \"AIzaSyA-eCHfzwyAex3Xg2UQ9h1TShEfhFf5KWg\",\n    authDomain: \"project-five-f9920.firebaseapp.com\",\n    databaseURL: \"https://project-five-f9920.firebaseio.com\",\n    projectId: \"project-five-f9920\",\n    storageBucket: \"project-five-f9920.appspot.com\",\n    messagingSenderId: \"336671408502\",\n    appId: \"1:336671408502:web:13088098ed306641d97a57\"\n};\n// Initialize Firebase\nfirebase.initializeApp(firebaseConfig);\n\nexport default firebase;","import React from 'react'\nimport firebase from './firebase.js'\n\nfunction FlickList(props) {\n    const removeFilm = () => {\n        const filmRef = firebase.database().ref(props.filmList.filmId)\n        filmRef.remove()\n    }\n\n    // Deconstruct the props for ease of use\n    const {filmList} = props\n    const {filmName, filmId} = filmList\n\n    return(\n        <li className=\"flickListItem\" id={filmId}>\n            <h3>{filmName.filmName}</h3>\n            <img src={filmName.filmImg} alt={\"A Poster for \" + filmName.filmName}/>\n            <button onClick={removeFilm}>Remove</button>\n        </li> \n    )\n}\n\nexport default FlickList","import React, { Component } from 'react'\n\n\nclass Form extends Component {\n    constructor() {\n        super();\n        this.state = {\n            userInput: \"\"\n        }\n    }\n\n    handleFormChange = (event) => {\n        this.setState({\n            userInput: event.target.value\n        })\n    }\n\n    waitForOnSubmit = (event) => {\n        this.props.handleFormSubmit(event, this.state.userInput)\n        this.setState({\n            userInput: \"\"\n        })\n        this.props.handleHeaderActive();\n    }\n\n\n    render(){\n        return(\n            <form onSubmit={this.waitForOnSubmit}>\n                <input \n                    type=\"text\" \n                    value={this.state.userInput} \n                    onChange={this.handleFormChange}\n                    placeholder=\"Enter film name\"\n                    className=\"formInput\"\n                />\n                <button className=\"formButton\" type=\"submit\" aria-label=\"Search\"> Search </button>\n            </form>\n        )\n    }\n}\n\nexport default Form","import React, { Component } from 'react'\n\nclass Help extends Component {\n    constructor(){\n        super();\n        this.state = {\n            active: false\n        }\n    }\n\n    handleShowHelp = () => {\n        this.setState({\n            active: !this.state.active\n        })\n    }\n\n    render(){\n        return(\n            <div className=\"helpBox\">\n                <button className=\"showHelp\" onClick={this.handleShowHelp} aria-label=\"Show help box\">Instructions</button>\n                {/* Help information: shown when {this.state.active: true} */}\n                {this.state.active \n                    ? <div className=\"helpContents\">\n                        <p>Need helping picking a movie?</p>\n                        <p>Find flicks you're interested in watching using the search bar below. Click \"Add Flick\" to add that movie to your FlickList. View your current FlickList by clicking the film strip button in the top right corner. Hit randomize and we'll make the choice for you.</p>\n                    </div>\n                    : null}\n            </div>\n        )\n    }\n}\n\nexport default Help","import React, { Component } from 'react'\nimport errorPoster from './assets/errorPoster.jpg'\n\nclass QueryList extends Component {\n\n    waitAddToUserList  = (event) => {\n        this.props.addToUserList(event, event.target.value, event.target.id, event.target.attributes.data.value)\n        this.added(event.target.id)\n    }\n\n    added = (id) => {\n        let button = document.getElementById(id)\n        button.innerHTML=\"Added\"\n    }\n\n    render(){\n        return (\n            <React.Fragment>\n                {this.props.error ? <li className=\"error\"><p>Sorry, there are no movies with that name available.</p> <p>Please try again.</p> </li> :null}\n                \n                {\n                    this.props.queryList.map((props) => {\n                        \n                        return (\n                            <li key={props.id} className=\"queryItem\">\n                                    <div className=\"imgContainer\">\n                                        <img src={props.poster_path === null ? errorPoster : \"https://image.tmdb.org/t/p/w500\" + props.poster_path} alt={\"Poster for \" + props.title} />\n                                    </div>\n                                    <div className=\"queryContent\">\n                                        <h3>{props.title}</h3>\n                                        <div className=\"overviewBox\">\n                                            <p>{props.overview}</p>\n                                        </div>\n                                        <button\n                                            onClick={this.waitAddToUserList}\n                                            value={props.title}\n                                            id={props.id}\n                                            data={\"https://image.tmdb.org/t/p/w500\" + props.poster_path}\n                                            className=\"addFlick\"\n                                        >\n                                            Add Fick\n                                        </button>\n                                    </div>\n                            </li>\n                        )\n                    })\n                }\n            </React.Fragment>\n        )\n    }\n\n}\n\nexport default QueryList","import React, { Component } from 'react';\nimport FlickList from './FlickList.js'\nimport Form from './Form.js'\nimport Help from './Help.js'\nimport QueryList from './QueryList.js'\nimport firebase from './firebase.js'\nimport axios from 'axios'\nimport './App.css';\n\nclass App extends Component {\n  // Constructor storing states. \n  constructor(){\n    super();\n    this.state = {\n      // filmList stores the \"final list\" that user has chosen\n      filmList: [],\n      // queryList stores the list of films from the API call\n      queryList: [],\n      // userInput is what the user inputs into the search bar\n      userInput: \"\",\n      // active is a boolean state that controls a few display/hide features\n      active: false,\n      // headerActive contols the headerUp and headerDown classes\n      headerActive: false,\n      // when error turns true (via aviosCall when a query is empty) then an error message is displayed. \n      error: false,\n      // randomChoice is the film that the randomizer chooses for the user to watch.\n      randomChoice: \"\",\n      // checks for duplicates\n      duplicate: null\n    }\n  }\n\n  // This attaches firebase to the app\n  componentDidMount() {\n    const dbRef = firebase.database().ref();\n    dbRef.on(`value`, (dbResponse) => {\n      const filmListFromDb = [];\n      const dataFromDb = dbResponse.val();\n      for (let key in dataFromDb) {\n        filmListFromDb.push( { filmName: dataFromDb[key], filmId: key})\n      }\n      this.setState({\n        filmList: filmListFromDb\n      })\n    })\n  }\n\n  // METHODS START \n    // axios in a function to make the code a little cleaner, and so I can reuse if need be. \n    axiosCall = (userQuery) => {\n      axios({\n        url: `https://api.themoviedb.org/3/search/movie`,\n        method: `GET`,\n        responseType: `json`,\n        params: {\n          api_key: `4f70306aa4e939e1535c12686b6403c7`,\n          query: userQuery,\n          include_adult: 'false',\n        }\n      }).then((response) => {\n        if (response.data.results.length !== 0) {\n          this.setState({\n            queryList: response.data.results,\n            error: false\n          })\n        } else {\n          this.setState({\n            queryList: [],\n            error: true\n          })\n        }\n      })\n    }\n\n    // handleChange captures the value change from the search input and pushes it into this.state.userInput (to be used for searching for a film)\n    handleChange = (event) => {\n      this.setState({\n        userInput: event.target.value\n      })\n    }\n\n    // handleFormSubmit listens to the form submit, then puts the userInput into axios\n    handleFormSubmit = (event, userSearchValue) => {\n      event.preventDefault();\n      // an if statement to stop fom empty search queries. If not empty, then we call Axios to search for the user's query.  \n      if (userSearchValue !== '') {\n        this.axiosCall(userSearchValue)\n        this.setState({\n          randomChoice: \"\"\n        })\n      }\n    }\n\n    // Adds a film to the list. The parameters are grabbed from QueryList.js when a user clicks to add a film\n    handleAddToUserList = (event, filmName, filmId, filmImg) => {\n      event.preventDefault();\n      const db = firebase.database().ref();\n      const duplicateCheck = []\n\n      // This takes a function creates a new array from the database of just the film ID's in order to check them for duplicates\n      db.once('value', function (snapshot) {\n        snapshot.forEach(function (childSnapshot) {\n          duplicateCheck.push(childSnapshot.val().filmId)\n        });\n      });\n\n      // if there is a duplicate, we tell the user the film has been added, and if not, we add it to the list. \n      if (duplicateCheck.includes(filmId)) {\n        alert(`${filmName} has already been added to your FlickList`)\n      } else {\n        db.push({ filmName: filmName, filmId: filmId, filmImg: filmImg })\n        this.setState({\n          userInput: \"\",\n        })\n      }\n\n    }\n\n    // Toggles the active state to true or false which toggles the FlickList.js (the side menu) on and off the screen\n    handleShowList = () => {\n      this.setState({\n        active: !this.state.active\n      })\n    }\n\n    // This looks into the film list and randomizes one to watch tonight. \n    handleRandomize = () => {\n      const randomFilm = [...this.state.filmList]\n      const randomNumber = Math.floor(Math.random() * randomFilm.length)\n      this.setState({\n        randomChoice: randomFilm[randomNumber].filmName.filmName,\n        queryList: []\n      })\n    }\n\n    // handleHeaderActive turns this.state.headerActive to true, and \"opening\" the page for the search query list to show. \n    handleHeaderActive = () => {\n      this.setState({\n        headerActive: true\n      })\n    }\n\n  // METHODS END\n\n  render(){\n    return (\n      <div className=\"App\">\n        <div className=\"wrapper flexCol relative\" >  \n            {/* Header section start */}\n          <header>\n\n              {/* headerUp/header down section start (moves up and down) */}\n              <div className={this.state.headerActive? \"headerUp flexCol\" : \"headerDown flexCol\"}>\n                <h1>FlickPicker</h1>\n                  <button onClick={this.handleShowList} className=\"hamburger\" aria-label=\"Open your film list menu\"><i className=\"fas fa-film\"></i><span>{this.state.filmList.length}</span></button>\n                \n\n\n                {/* Help.js section start */}\n                <Help />\n                {/* Help.js section end */}\n\n\n                {/* Form.js section start */}\n                <Form \n                  wow={this.wow} \n                  handleFormSubmit={this.handleFormSubmit} \n                  handleChange={this.handleChange}\n                  handleHeaderActive={this.handleHeaderActive} />\n                {/* Form.js section end */}\n\n\n              </div>\n              {/* headerUp/header down section end */}\n\n\n              {/* FlickList / Side Menu start */}\n              <aside className={this.state.active ? \"showList\" : null}>\n                <div className=\"menuTop\">\n                  <h2>Your FlickList</h2>\n                </div>\n                <ul className=\"userList\">\n                  <li></li>\n                  {\n                    this.state.filmList.map((film) => {\n                      return (\n                        <FlickList filmList={film} key={film.filmId} />\n                      )\n                    })\n                  }\n                </ul>\n              <button onClick={this.handleRandomize} className={this.state.active ? \"showList randomize\" : \"randomize\"} aria-label=\"Randomize your film list\">Randomize</button>\n\n              </aside>\n              {/* FlickList / Side Menu end */}\n\n            </header>\n            {/* Header section end */}\n\n\n          <main>\n            {/* Search query list (QueryList.js) start */}\n            {\n              this.state.headerActive ? \n              <ul className=\"queryList\">\n                  <QueryList queryList={this.state.queryList} error={this.state.error} addToUserList={this.handleAddToUserList}/>\n              </ul>\n              : null\n            }\n            {/* Search query list (QueryList.js) end */}\n\n            {/* This displays the random choice for the user to watch */}\n              {\n                this.state.randomChoice !== \"\" ? \n                <div className=\"randomChoice\">\n                  <p>You should watch</p>\n                  <h4>{this.state.randomChoice}</h4> \n                  <button aria-label=\"Close random choice\" onClick={()=> this.setState({randomChoice:\"\"})}>Thanks!</button>\n                </div>\n                : null\n              }\n            {/* This displays the random choice for the user to watch */}\n            \n\n          </main>\n            \n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}